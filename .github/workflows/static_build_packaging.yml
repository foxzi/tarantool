name: static_build_packaging

on:
  push:
    branches:
      - 'master'
      - 'release/**'
      - 'foxzi/add_tests_to_ci'
    tags:
      - '**'
  pull_request:
    types: [ opened, reopened, synchronize, labeled ]
  workflow_dispatch:

concurrency:
  # Update of a developer branch cancels the previously scheduled workflow
  # run for this branch. However, the 'master' branch, release branch, and
  # tag workflow runs are never canceled.
  #
  # We use a trick here: define the concurrency group as 'workflow run ID' +
  # 'workflow run attempt' because it is a unique combination for any run.
  # So it effectively discards grouping.
  #
  # Important: we cannot use `github.sha` as a unique identifier because
  # pushing a tag may cancel a run that works on a branch push event.
  group: ${{ (
    github.ref == 'refs/heads/master' ||
    startsWith(github.ref, 'refs/heads/release/') ||
    startsWith(github.ref, 'refs/tags/')) &&
    format('{0}-{1}', github.run_id, github.run_attempt) ||
    format('{0}-{1}', github.workflow, github.ref) }}
  cancel-in-progress: true

jobs:
  static_build_packaging:
    name: 'static_build_packaging_(${{ matrix.arch }})'

    # Run on push to the 'master' and release branches of tarantool/tarantool
    # or on pull request if the 'full-ci' or 'static-build-ci' label is set.
    # if: github.repository == 'tarantool/tarantool' &&
    #     ( github.event_name != 'pull_request' ||
    #       contains(github.event.pull_request.labels.*.name, 'full-ci') ||
    #       contains(github.event.pull_request.labels.*.name, 'static-build-ci') )

    runs-on: ubuntu-latest

    # strategy:
    #   fail-fast: false
    #   matrix:
    #     include:
    #       - runner: ubuntu-20.04-self-hosted
    #         arch: x86_64
    #       - runner: graviton
    #         arch: aarch64

    steps:
      - name: Prepare checkout
        uses: tarantool/actions/prepare-checkout@master
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Build static packages
        run: make -f .pack.mk package-static
      - name: Pack libraries for testing
        run: tar cvfz build/test-libs-$(uname -m).tgz -C static-build/tarantool-prefix/src/tarantool-build/ --exclude=unit test
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tarantool-deb-rpm-x86_64-aarch64
          retention-days: 21
          path: |
            build/tarantool*.deb
            build/tarantool*.rpm
            build/test-libs*.tgz
          if-no-files-found: error
      - name: Send VK Teams message on failure
        if: failure()
        uses: ./.github/actions/report-job-status
        with:
          bot-token: ${{ secrets.VKTEAMS_BOT_TOKEN }}

  static_build_testing:
    name: 'static_build_testing_(${{ matrix.sys-arch }})_${{ matrix.os }}'

    # Run on push to the 'master' and release branches of tarantool/tarantool
    # or on pull request if the 'full-ci' or 'static-build-ci' label is set.
    # if: github.repository == 'tarantool/tarantool' &&
    #     ( github.event_name != 'pull_request' ||
    #       contains(github.event.pull_request.labels.*.name, 'full-ci') ||
    #       contains(github.event.pull_request.labels.*.name, 'static-build-ci') )

    runs-on: ubuntu-latest

    needs: static_build_packaging

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-jammy
            sys-arch: x86_64
            install-tarantool: |
              dpkg -i tarantool*$(dpkg --print-architecture).deb
            install-requires: |
              apt update && apt -y install python3-pip && pip install -r requirements.txt
          # - os: ubuntu-jammy
          #   sys-arch: aarch64
          #   install-tarantool: |
          #     dpkg -i tarantool*$(dpkg --print-architecture).deb
          #   install-requires: |
          #     apt update && apt -y install python3-pip && pip install -r requirements.txt
          - os: debian-bullseye
            sys-arch: x86_64
            install-tarantool: |
              dpkg -i tarantool*$(dpkg --print-architecture).deb
            install-requires: |
              apt update && apt -y install python3-pip && pip install -r requirements.txt
          # - os: debian-bullseye
          #   sys-arch: aarch64
          #   install-tarantool: |
          #     dpkg -i tarantool*$(dpkg --print-architecture).deb
          #   install-requires: |
          #     apt update && apt -y install python3-pip && pip install -r requirements.txt
          - os: fedora-36
            sys-arch: x86_64
            install-tarantool: |
              dnf -y localinstall tarantool*$(uname -m).rpm
            install-requires: |
              dnf -y install python3-pip e2fsprogs && pip install -r requirements.txt
          # - os: fedora-36
          #   sys-arch: aarch64
          #   install-tarantool: |
          #     dnf -y localinstall tarantool*$(uname -m).rpm
          #   install-requires: |
          #     dnf -y install python3-pip e2fsprogs && pip install -r requirements.txt

    container:
      image: packpack/packpack:${{ matrix.os }}
      # Mount /dev to the container to be able to mount a disk image inside it
      # for successful run of the .github/actions/environment action.
      volumes:
        - /dev:/dev
      # Our testing expects that the init process (PID 1) will
      # reap orphan processes. At least the following test leans
      # on it: app-tap/gh-4983-tnt-e-assert-false-hangs.test.lua.
      # Add extra privileges to the container for successful run
      # of the .github/actions/environment action.
      options: '--init --privileged'

    steps:
      - name: Prepare checkout
        uses: tarantool/actions/prepare-checkout@master
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
#      - uses: ./.github/actions/environment
      - name: Download built artifacts
        uses: actions/download-artifact@v3
        with:
          name: tarantool-deb-rpm-x86_64-aarch64
          path: build
      - name: Prepare environment for testing (extract libraries)
        run: tar xvfz test-libs-$(uname -m).tgz
        working-directory: build
      - name: Install built packages
        run: ${{ matrix.install-tarantool }}
        working-directory: build
      - name: Install test dependencies
        run: ${{ matrix.install-requires }}
        working-directory: test-run
      - name: Run tests
        run: ./test-run.py --force --builddir ../build --executable /usr/bin/tarantool || true
        working-directory: test
      - name: Send VK Teams message on failure
        if: failure()
        uses: ./.github/actions/report-job-status
        with:
          bot-token: ${{ secrets.VKTEAMS_BOT_TOKEN }}

  static_build_deploy:
    name: 'static_build_deploy'

    # Run on push to the 'master' and release branches of tarantool/tarantool
    # or on pull request if the 'full-ci' or 'static-build-ci' label is set.
    # if: github.repository == 'tarantool/tarantool' &&
    #     ( github.event_name != 'pull_request' ||
    #       contains(github.event.pull_request.labels.*.name, 'full-ci') ||
    #       contains(github.event.pull_request.labels.*.name, 'static-build-ci') )

    runs-on: ubuntu-latest

    needs: static_build_testing

    steps:
      - name: Prepare checkout
        uses: tarantool/actions/prepare-checkout@master
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Download built artifacts
        uses: actions/download-artifact@v3
        with:
          name: tarantool-deb-rpm-x86_64-aarch64
          path: build
      - name: Deploy static packages
        run: |
          if ${{ ( startsWith(github.ref, 'refs/tags/2.') ||
                  startsWith(github.ref, 'refs/tags/3.') ) &&
                !endsWith(github.ref, '-entrypoint') }}; then
          case ${{ github.ref }} in
            # It's relevant since 2.10 only.
            refs/tags/*-alpha*|refs/tags/*-beta*|refs/tags/*-rc*)
              REPO_TYPE=pre-release make -f .pack.mk ${DEPLOY_TARGET}
              ;;
            refs/tags/*)
              REPO_TYPE=release make -f .pack.mk ${DEPLOY_TARGET}
              ;;
          esac
          fi
        env:
          RWS_AUTH: ${{ secrets.RWS_AUTH }}